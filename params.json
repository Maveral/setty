{"name":"Rails poradnik","tagline":"Poradnik Ruby on Rails dla świerzaków","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```ruby\r\nrequire 'xmpp4r'\r\nrequire 'xmpp4r/roster/helper/roster'\r\nrequire 'xmpp4r/vcard/helper/vcard'\r\nrequire 'mechanize'\r\nrequire 'thread'\r\ninclude Jabber\r\n\r\na = Mechanize.new\r\na.agent.http.verify_mode = OpenSSL::SSL::VERIFY_NONE\r\npage = a.get(\"http://quakelive.com/login\")\r\nform = page.form\r\nform.email = 'franke.mariusz@gmail.com'\r\nform.pass = 'lol'\r\npage = a.submit(form, form.buttons.first)\r\npage = a.get(\"http://www.quakelive.com/user/load\").body\r\n\r\nxaid = page.match(/.*XAID\":\"(\\w*)\"/)[1]\r\n\r\nputs xaid\r\n\r\njid = Jabber::JID.new(\"Ruby@xmpp.quakelive.com/quakelive\")\r\ncl = Jabber::Client.new(jid)\r\ncl.connect\r\ncl.auth(xaid)\r\n\r\nroster = Jabber::Roster::Helper.new(cl)\r\n\r\n# Callback to handle updated roster items\r\nroster.add_update_callback { |olditem,item|\r\n  if [:from, :none].include?(item.subscription) && item.ask != :subscribe\r\n    puts(\"Subscribing to #{item.jid}\")\r\n    item.subscribe\r\n  end\r\n\r\n  # Print the item\r\n  if olditem.nil?\r\n    # We didn't knew before:\r\n    puts(\"#{item.iname} (#{item.jid}, #{item.subscription}) #{item.groups.join(', ')}\")\r\n  else\r\n    # Showing whats different:\r\n    puts(\"#{olditem.iname} (#{olditem.jid}, #{olditem.subscription}) #{olditem.groups.join(', ')} -> #{item.iname} (#{item.jid}, #{item.subscription}) #{item.groups.join(', ')}\")\r\n  end\r\n\r\n  # If the item has no name associated...\r\n  unless item.iname\r\n    Thread.new do\r\n      puts(\"#{item.jid} has no nickname... getting vCard\")\r\n      begin\r\n        # ...get a vCard\r\n        vcard = Jabber::Vcard::Helper.new(cl).get(item.jid.strip)\r\n\r\n        unless vcard.nil?\r\n          # Rename him to vCard's <NICKNAME/> field\r\n          if vcard['NICKNAME']\r\n            item.iname = vcard['NICKNAME']\r\n            puts(\"Renaming #{item.jid} to #{vcard['NICKNAME']}\")\r\n            item.send\r\n          # Rename him to vCard's <FN/> field\r\n          elsif vcard['FN']\r\n            item.iname = vcard['FN']\r\n            puts(\"Renaming #{item.jid} to #{vcard['FN']}\")\r\n            item.send\r\n          # We've got a lazy one\r\n          else\r\n            puts(\"#{item.jid} provided no details in vCard\")\r\n          end\r\n        end\r\n\r\n      rescue Exception => e\r\n        # This will be (mostly) thrown by Jabber::Vcard::Helper#get\r\n        puts(\"Error getting vCard for #{item.jid}: #{e.to_s}\")\r\n      end\r\n    end\r\n  end\r\n}\r\n\r\n# Presence updates:\r\nroster.add_presence_callback { |item,oldpres,pres|\r\n  # Can't look for something that just does not exist...\r\n  if pres.nil?\r\n    # ...so create it:\r\n    pres = Jabber::Presence.new\r\n  end\r\n  if oldpres.nil?\r\n    # ...so create it:\r\n    oldpres = Jabber::Presence.new\r\n  end\r\n\r\n  # Print name and jid:\r\n  name = \"#{pres.from}\"\r\n  if item.iname\r\n    name = \"#{item.iname} (#{pres.from})\"\r\n  end\r\n  puts(name)\r\n\r\n  # Print type changes:\r\n  unless oldpres.type.nil? && pres.type.nil?\r\n    puts(\"  Type: #{oldpres.type.inspect} -> #{pres.type.inspect}\")\r\n  end\r\n  # Print show changes:\r\n  unless oldpres.show.nil? && pres.show.nil?\r\n    puts(\"  Show:     #{oldpres.show.to_s.inspect} -> #{pres.show.to_s.inspect}\")\r\n  end\r\n  # Print status changes:\r\n  unless oldpres.status.nil? && pres.status.nil?\r\n    puts(\"  Status:   #{oldpres.status.to_s.inspect} -> #{pres.status.to_s.inspect}\")\r\n  end\r\n  # Print priority changes:\r\n  unless oldpres.priority.nil? && pres.priority.nil?\r\n    puts(\"  Priority: #{oldpres.priority.inspect} -> #{pres.priority.inspect}\")\r\n  end\r\n\r\n  # Note: presences with type='error' will reflect our own show/status/priority\r\n  # as it is mostly just a reply from a server. This is *not* a bug.\r\n}\r\n\r\n# Subscription requests and responses:\r\nsubscription_callback = lambda { |item,pres|\r\n  name = pres.from\r\n  if item != nil && item.iname != nil\r\n    name = \"#{item.iname} (#{pres.from})\"\r\n  end\r\n  case pres.type\r\n    when :subscribe then puts(\"Subscription request from #{name}\")\r\n    when :subscribed then puts(\"Subscribed to #{name}\")\r\n    when :unsubscribe then puts(\"Unsubscription request from #{name}\")\r\n    when :unsubscribed then puts(\"Unsubscribed from #{name}\")\r\n    else raise \"The Roster Helper is buggy!!! subscription callback with type=#{pres.type}\"\r\n  end\r\n}\r\nroster.add_subscription_callback(0, nil, &subscription_callback)\r\nroster.add_subscription_request_callback(0, nil, &subscription_callback)\r\n\r\n# Send initial presence\r\n# this is important for receiving presence of subscribed users\r\ncl.send(Jabber::Presence.new.set_show(:dnd).set_status('Watching my roster change...'))\r\n\r\n# Main loop:\r\nThread.stop\r\n\r\ncl.close\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and we’ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}